---
interface Props {
    tags: Set<string> | string[],
    shouldLoadHeader: boolean,
    shouldLoadAllTags: boolean,
}

const { shouldLoadHeader, shouldLoadAllTags, tags  } = Astro.props;
const tagsArray = Array.isArray(tags) ? tags : Array.from(tags);
---

<Fragment>
    {shouldLoadHeader && <p class="text-xl lg:text-2xl">Tags</p>}
    <ul>
        {shouldLoadAllTags ? 
        <Fragment>
            {
                tagsArray.map((t) => (
                    <li
                    class="mt-1 hover-underline border-solid border-2 border-wuul-accent rounded-lg p-2 text-wuul-bg bg-wuul-accent min-w-0 min-h-0 font-sub"
                >
                    {t}
                </li>    
                ))
            }
        </Fragment>
        :
        <Fragment>
            {
                tagsArray.slice(0, 3).map((t) => (
                    <li
                        class="mt-1 hover-underline border-solid border-2 border-wuul-accent rounded-lg p-2 text-wuul-bg bg-wuul-accent min-w-0 min-h-0 font-sub"
                    >
                        {t}
                    </li>
                ))
            }
            {
                 tagsArray.length > 3 && (
                    <li
                        class="mt-1 hover-underline border-solid border-2 border-wuul-accent rounded-lg p-2 text-wuul-bg bg-wuul-accent min-w-0 min-h-0 font-sub"
                    >
                        {`${tagsArray.length - 3} more ...`}
                    </li>
                )

            }
        </Fragment>
        }
    </ul>
</Fragment>

<style>
    :hover.hover-underline {
        text-decoration: none;
        background-color: #FDFEF8;
        color: #485F40;
        border-color: #485F40;
    }
</style>